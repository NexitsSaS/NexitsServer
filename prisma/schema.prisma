// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum order_state {
  Cart
  Placed
  Pending
  Approuved
  Archived
}

enum budget_type {
  default
  special
}

model employee {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  order    order?
  teams    teams[]
}

model budget {
  id      Int         @id @default(autoincrement())
  budget  budget_type
  amount  Int
  teams   teams?      @relation(fields: [teamsID], references: [id])
  teamsID Int

}

model teams {
  id         Int       @id @default(autoincrement())
  name       String
  department String
  employee   employee? @relation(fields: [employeeID], references: [id])
  employeeID Int
  budget     budget[]
}


model order {
  id          Int         @id @default(autoincrement())
  employee    employee?   @relation(fields: [employeeID], references: [id])
  employeeID  Int         @unique
  isapprouved Boolean     @default(false)
  state       order_state
  product     product[]
}

model product {
  id              Int            @id @default(autoincrement())
  name            String
  price           Int
  quantity        Int
  instock         Boolean        @default(true)
  producteditor   producteditor? @relation(fields: [producteditorID], references: [id])
  producteditorID Int
  order           order?         @relation(fields: [productID], references: [id])
  productID       Int
}

model producteditor {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  product  product[]
}

//we have to do a meeting to finish the stuff underneath yhis line xD
model clientadmin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model superadmin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

// model account {
//   id       Int    @id @default(autoincrement())
//   user     user?  @relation(fields: [userID], references: [id])
//   userID   Int
//   email    String @unique
//   password String

// }

// model user {
//   id              Int               @id @default(autoincrement())
//   fname           String
//   lname           String
//   type            user_type
//   posts           post[]
//   comments        comment[]
//   date            DateTime          @default(now())
//   skills          skill[]
//   portfolio       portfolio?        @relation(fields: [portfolioID], references: [id])
//   portfolioID     Int?              @unique
//   skill_rating    skill_rating?
//   overall_rating  overall_rating?
//   failed_skills   failed_skills[]
//   verified_skills verified_skills[]
//   badges          badges[]
//   accounts        account[]
//   joboffers       joboffers?
// }
